/** * 项目名称：平台 * 系统名：质检管理 * 文件名：CpbltzdAction.java*/package com.hoperun.sample.masterslave.action;import java.io.PrintWriter;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.hoperun.commons.action.BaseAction;import com.hoperun.commons.model.BusinessConsts;import com.hoperun.commons.model.IListPage;import com.hoperun.commons.util.ParamUtil;import com.hoperun.commons.util.StringUtil;import com.hoperun.sample.masterslave.model.MasterSlaveModel;import com.hoperun.sample.masterslave.model.MasterSlavekkmxModel;import com.hoperun.sample.masterslave.model.MasterSlavemxModel;import com.hoperun.sample.masterslave.service.MasterSlaveService;import com.hoperun.sys.model.UserBean;// TODO: Auto-generated Javadoc/** * * @module 库存管理 * * @fuc 成品不良通知单 * * @version 1.1 * * @author zhuxw */public class MasterSlaveAction extends BaseAction {    /** 业务逻辑对象. */    private MasterSlaveService masterSlaveService;     /**     * Sets the master slave service.     *      * @param masterSlaveService the new master slave service     */    public void setMasterSlaveService(MasterSlaveService masterSlaveService) {		this.masterSlaveService = masterSlaveService;	}	/**	 * * 成品不良品通知单信息框架页面	 * * @param mapping	 * * @param form	 * * @param request	 * * @param response	 * * @return.	 * 	 * @param mapping the mapping	 * @param form the form	 * @param request the request	 * @param response the response	 * 	 * @return the action forward	 */    public ActionForward toFrame(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        //设置跳转时需要的一些公用属性        ParamUtil.setCommAttributeEx(request);        request.setAttribute("paramUrl", ParamUtil.utf8Decoder(request, "paramUrl"));        return mapping.findForward("frames");    }    /**     * * 查询结果列表     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        Map <String, String> params = new HashMap <String, String>();        ParamUtil.putStr2Map(request, "CPBLTZDBH", params);        ParamUtil.putStr2Map(request, "CPZJDBH", params);        ParamUtil.putStr2Map(request, "WLDWBH", params);        //ParamUtil.putStr2Map(request, "WLDWMC", params);        params.put("WLDWMC", ParamUtil.utf8Decoder(request, "WLDWMC"));        ParamUtil.putStr2Map(request, "WLBH", params);        //ParamUtil.putStr2Map(request, "WLMC", params);        params.put("WLMC", ParamUtil.utf8Decoder(request, "WLMC"));        ParamUtil.putStr2Map(request, "PP", params);        ParamUtil.putStr2Map(request, "NF", params);        ParamUtil.putStr2Map(request, "JJ", params);        //ParamUtil.putStr2Map(request, "YSMC", params);        params.put("YSMC", ParamUtil.utf8Decoder(request, "YSMC"));        ParamUtil.putStr2Map(request, "WLXXYSID", params);        ParamUtil.putStr2Map(request, "TZSL", params);        ParamUtil.putStr2Map(request, "THSL", params);        ParamUtil.putStr2Map(request, "TZBHGSL", params);        ParamUtil.putStr2Map(request, "RBJSSL", params);        ParamUtil.putStr2Map(request, "BFSL", params);        ParamUtil.putStr2Map(request, "XSSL", params);        //ParamUtil.putStr2Map(request, "JYRXM", params);        params.put("JYRXM", ParamUtil.utf8Decoder(request, "JYRXM"));        //ParamUtil.putStr2Map(request, "BMMC", params);        params.put("BMMC", ParamUtil.utf8Decoder(request, "BMMC"));        //ParamUtil.putStr2Map(request, "CRENAME", params);        params.put("CRENAME", ParamUtil.utf8Decoder(request, "CRENAME"));        ParamUtil.putStr2Map(request, "frCRETIME", params);        ParamUtil.putStr2Map(request, "toCRETIME", params);        String module = request.getParameter("module");        String search = request.getParameter("search");        //权限级别        //ParamUtil.putQxjbStr2Map(request, params, PrivateConsts.CPBLTZDWH, PrivateConsts.CPBLTZDSH, "CPBLTZDID", "T_ERP_ZJ_CPBLTZD", "ERP_ZJGL_CPBLTZSP");                if (search == null || "".equals(search)) {            if (module != null && request.getParameter("STATE") == null) {                if ("wh".equals(module)) {                    params.put("STATE", "('" + BusinessConsts.JC_STATE_DEFAULT + "','" + BusinessConsts.REVOKE + "','" + BusinessConsts.REJECT + "')");                } else if ("sh".equals(module)) {                    params.put("STATE", "('" + BusinessConsts.COMMIT + "')");                }            }        } else {            if (request.getParameter("STATE") != null && !"".equals(request.getParameter("STATE"))) {                params.put("STATE", "('" + request.getParameter("STATE") + "')");            }        }        //只查询0的记录。1为删除。0为正常        params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);        //字段排序        ParamUtil.setOrderField(request, params);        int pageNo = ParamUtil.getInt(request, "pageNo", 1);        ParamUtil.putStr2Map(request, "pageSize", params);        IListPage page = masterSlaveService.pageQuery(params, pageNo);        request.setAttribute("params", params);        request.setAttribute("page", page);        return mapping.findForward("list");    }    /**     * * 查看成品不良品通知单详细信息     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toDetail(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");        if (StringUtils.isNotEmpty(CPBLTZDID)) {            Map <String, String> entry = masterSlaveService.load(CPBLTZDID);            request.setAttribute("rst", entry);        }        return mapping.findForward("todetail");    }    /**     * * 删除成品不良品通知单     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");            masterSlaveService.txDelete(CPBLTZDID);            masterSlaveService.clearCaches(CPBLTZDID);        } catch (Exception e) {            jsonResult = jsonResult(false, "删除失败");        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }    /**     * *     * * 成品不良品通知单编辑框架页面     * *     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toEditFrame(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        //设置跳转时需要的一些公用属性        ParamUtil.setCommAttributeEx(request);        request.setAttribute("paramUrl", ParamUtil.utf8Decoder(request, "paramUrl"));                return mapping.findForward("editFrame");    }    /**     * * 明细列表     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward childList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");        if (StringUtils.isNotEmpty(CPBLTZDID)) {            List <MasterSlavemxModel> result = masterSlaveService.childQuery(CPBLTZDID);            request.setAttribute("rst", result);        }        //为空直接跳转显示页面，而不是错误提示。        return mapping.findForward("childlist");    }    /**     * * 修改页面跳转     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toParentEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        // 从从表采用中间表的方式临时保存，这里给返回一个唯一标示做从从表的中间表唯一标示。        String tempFkId = StringUtil.uuid32len();        request.setAttribute("TEMPFKID", tempFkId);        request.setAttribute("SESSIONID", tempFkId);        String selRowId = ParamUtil.get(request, "selRowId");        //为空则是新增，否则是修改        if (StringUtils.isNotEmpty(selRowId)) {            Map <String, String> entry = masterSlaveService.load(selRowId);            request.setAttribute("rst", entry);        }        return mapping.findForward("toedit");    }    /**     * * 明细编辑跳转页面     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toChildEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        //多个Id批量查询，用逗号隔开        String CPBLTZDMXIDs = request.getParameter("CPBLTZDMXIDS");        //没有零星领料Id可以直接跳转。        if (StringUtils.isNotEmpty(CPBLTZDMXIDs)) {            List <MasterSlavemxModel> list = masterSlaveService.loadChilds(CPBLTZDMXIDs);            request.setAttribute("rst", list);        }        return mapping.findForward("childedit");    }    /**     * * 编辑页面加载子页面     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward modifyToChildEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");        if (StringUtils.isNotEmpty(CPBLTZDID)) {            List <MasterSlavemxModel> result = masterSlaveService.childQuery(CPBLTZDID);            request.setAttribute("rst", result);        }        return mapping.findForward("childedit");    }    /**     * * 编辑//新增或修改。     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            UserBean userBean = (UserBean) request.getSession(false).getAttribute("UserBean");            String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");            String parentJsonData = ParamUtil.get(request, "parentJsonData");            MasterSlaveModel cpbltzdModel = new Gson().fromJson(parentJsonData, new TypeToken <MasterSlaveModel>() {}.getType());            String jsonDate = ParamUtil.get(request, "childJsonData");            List <MasterSlavemxModel> terpzjcpbltzdmxList = null;            if (StringUtils.isNotEmpty(jsonDate)) {                terpzjcpbltzdmxList = new Gson().fromJson(jsonDate, new TypeToken <List <MasterSlavemxModel>>() {                }.getType());            }            masterSlaveService.txEdit(CPBLTZDID, userBean, cpbltzdModel, terpzjcpbltzdmxList);        } catch (Exception e) {            jsonResult = jsonResult(false, "保存失败");        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }    /**     * * 明细编辑     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void childEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDID = request.getParameter("CPBLTZDID");            String jsonDate = request.getParameter("childJsonData");            if (StringUtils.isNotEmpty(jsonDate)) {                List <MasterSlavemxModel> modelList = new Gson().fromJson(jsonDate, new TypeToken <List <MasterSlavemxModel>>() {                }.getType());                masterSlaveService.txChildEdit(CPBLTZDID, modelList);            }        } catch (Exception e) {            jsonResult = jsonResult(false, "保存失败");        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }    /**     * * 明细编辑     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void childEditkk(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDID = request.getParameter("CPBLTZDID");            String jsonDate = request.getParameter("childJsonData");            if (StringUtils.isNotEmpty(jsonDate)) {                List <MasterSlavekkmxModel> modelList = new Gson().fromJson(jsonDate, new TypeToken <List <MasterSlavekkmxModel>>() {                }.getType());                masterSlaveService.txChildEditkk(CPBLTZDID, modelList);            }        } catch (Exception e) {            jsonResult = jsonResult(false, "保存失败");        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }    /**     * * 明细批量删除     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void childDelete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDMXIDs = request.getParameter("CPBLTZDMXIDS");            //批量删除，多个Id之间用逗号隔开            masterSlaveService.txBatch4DeleteChild(CPBLTZDMXIDs);        } catch (Exception e) {            jsonResult = jsonResult(false, "删除失败");        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }    /**     * * 明细批量删除     * * Description :     * * @param mapping     * * @param form     * * @param request     * * @param response     * * @return.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void childDeletekk(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDMXIDs = request.getParameter("CPBLTZDMXIDS");            //批量删除，多个Id之间用逗号隔开            masterSlaveService.txBatch4DeleteChildkk(CPBLTZDMXIDs);        } catch (Exception e) {            jsonResult = jsonResult(false, "删除失败");        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }    /**     * * 提交时，校验是否有明细.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void toCommit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        String errorId = "";        try {            String CPBLTZDID = request.getParameter("CPBLTZDID");            List <MasterSlavemxModel> list = masterSlaveService.childQuery(CPBLTZDID);            if (list.size() == 0) {                errorId = "0";                throw new Exception();            }        } catch (Exception e) {            if ("0".equals(errorId)) {                jsonResult = jsonResult(false, "没有明细，不能提交!");            } else {                jsonResult = jsonResult(false, "提交失败");            }        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }}
/** * 项目名称：平台 * 系统名：质检管理 * 文件名：CpbltzdServiceImpl.java*/package com.hoperun.sample.masterslave.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.TreeMap;import org.apache.commons.lang.StringUtils;import com.hoperun.commons.model.BusinessConsts;import com.hoperun.commons.model.Consts;import com.hoperun.commons.model.IListPage;import com.hoperun.commons.service.BaseService;import com.hoperun.commons.util.StringUtil;import com.hoperun.sample.masterslave.model.MasterSlaveModel;import com.hoperun.sample.masterslave.model.MasterSlavecmmxzjbModel;import com.hoperun.sample.masterslave.model.MasterSlavekkmxModel;import com.hoperun.sample.masterslave.model.MasterSlavemxModel;import com.hoperun.sample.masterslave.service.MasterSlaveService;import com.hoperun.sys.model.UserBean;// TODO: Auto-generated Javadoc/** * * @module 库存管理 * * @fuc 成品不良通知单 * * @version 1.1 * * @author zhuxw */public class MasterSlaveServiceImpl extends BaseService implements MasterSlaveService {    /**     * * 查询并分页     * * @param params map对象     * * @param pageNo 页码.     *      * @param params the params     * @param pageNo the page no     *      * @return the i list page     */    public IListPage pageQuery(Map params, int pageNo) {        return this.pageQuery("Cpbltzd.pageQuery", "Cpbltzd.pageCount", params, pageNo);    }    /**     * * 加载     * * @param param 主键字段值.     *      * @param param the param     *      * @return the map< string, string>     */    public Map <String, String> load(String param) {        return (Map <String, String>) load("Cpbltzd.loadById", param);    }    /**     * * 插入数据     * * @param params map对象.     *      * @param params the params     *      * @return true, if tx insert     */    public boolean txInsert(Map <String, String> params) {        insert("Cpbltzd.insert", params);        return true;    }    /**     * * 更新数据     * * @param params map对象.     *      * @param params the params     *      * @return true, if tx update by id     */    public boolean txUpdateById(Map <String, String> params) {        return update("Cpbltzd.updateById", params);    }    /**     * * 记录删除 :软删除,只更新状态     * * Description :     * * @param CPBLTZDID     * * @return.     *      * @param CPBLTZDID the cPBLTZDID     *      * @return true, if tx delete     */    @Override    public boolean txDelete(String CPBLTZDID) {        //删除父        update("Cpbltzd.delete", CPBLTZDID);        //删除子表        return update("Cpbltzdmx.deleteByFkId", CPBLTZDID);    }    /**     * * 主表及子表编辑 新增/修改。     * * Description :     * * @param CPBLTZDID     * * @param cpbltzdModel     * * @param terpzjcpbltzdmxList.     *      * @param CPBLTZDID the cPBLTZDID     * @param userBean the user bean     * @param cpbltzdModel the cpbltzd model     * @param terpzjcpbltzdmxList the terpzjcpbltzdmx list     */    @Override    public void txEdit(String CPBLTZDID, UserBean userBean, MasterSlaveModel cpbltzdModel, List <MasterSlavemxModel> terpzjcpbltzdmxList) {        Map <String, String> paramss = new HashMap <String, String>();        paramss.put("WLBH", cpbltzdModel.getWLBH());        paramss.put("WLMC", cpbltzdModel.getWLMC());        paramss.put("WLXXID", cpbltzdModel.getWLXXID());        paramss.put("PP", cpbltzdModel.getPP());        paramss.put("NF", cpbltzdModel.getNF());        paramss.put("JJ", cpbltzdModel.getJJ());        paramss.put("WLXXYSID", cpbltzdModel.getWLXXYSID());        paramss.put("YSMC", cpbltzdModel.getYSMC());        paramss.put("YSBH", cpbltzdModel.getYSBH());                Map <String, String> params = new HashMap <String, String>();        params.put("CPZJDBH", cpbltzdModel.getCPZJDBH());        params.put("WLDWBH", cpbltzdModel.getWLDWBH());        params.put("WLDWMC", cpbltzdModel.getWLDWMC());        params.put("YSMC", cpbltzdModel.getYSMC());        params.put("WLBH", cpbltzdModel.getWLBH());        params.put("WLXXID", cpbltzdModel.getWLXXID());        params.put("PP", cpbltzdModel.getPP());        params.put("NF", cpbltzdModel.getNF());        params.put("JJ", cpbltzdModel.getJJ());        params.put("WLXXYSID", cpbltzdModel.getWLXXYSID());        params.put("CPZJTZDID", cpbltzdModel.getCPZJTZDID());        params.put("WLDWXXID", cpbltzdModel.getWLDWXXID());        params.put("WLMC", cpbltzdModel.getWLMC());        params.put("THSL", cpbltzdModel.getTHSL());        params.put("TZBHGSL", cpbltzdModel.getTZBHGSL());        params.put("KTZBHGSL", cpbltzdModel.getKTZBHGSL());        params.put("YTZBHGSL", cpbltzdModel.getYTZBHGSL());        params.put("RBJSSL", cpbltzdModel.getRBJSSL());        params.put("BFSL", cpbltzdModel.getBFSL());        params.put("XSSL", cpbltzdModel.getXSSL());        params.put("YSBH", cpbltzdModel.getYSBH());        params.put("JYRID", cpbltzdModel.getJYRID());        params.put("JYRXM", cpbltzdModel.getJYRXM());        params.put("JYSJ", cpbltzdModel.getJYSJ());        params.put("WBYYBJ", cpbltzdModel.getWBYYBJ());        params.put("TZSL", cpbltzdModel.getTZSL());        params.put("CLYJ", cpbltzdModel.getCLYJ());        params.put("REMARK", cpbltzdModel.getREMARK());        params.put("LCH", cpbltzdModel.getLCH() == null ? "" : cpbltzdModel.getLCH());        //如果lxllId为空，说明是新增记录        if (StringUtils.isEmpty(CPBLTZDID)) {            CPBLTZDID = StringUtil.uuid32len();            String CPBLTZDBH;                //CPBLTZDBH = LogicUtil.getBmgz("ERP_ZJ_CPBLTZDBH");            	//实际开发中应该通过编码规则获取，在该例子中获取当前时间，只是为了做演示。	            CPBLTZDBH= String.valueOf(new Date().getTime());            params.put("CPBLTZDBH", CPBLTZDBH);            params.put("CPBLTZDID", CPBLTZDID);            params.put("CREATER", userBean.getXTYHID());            params.put("CRENAME", userBean.getXM());            params.put("STATE", BusinessConsts.JC_STATE_DEFAULT);            params.put("BMMC", userBean.getBMMC());            params.put("JGMC", userBean.getJGMC());            params.put("DELFLAG", BusinessConsts.YJLBJ_FLAG_FALSE);            params.put("JGXXID", userBean.getJGXXID());            params.put("ZTXXID", userBean.getLoginZTXXID());            params.put("BMXXID", userBean.getBMXXID());            insert("Cpbltzd.insert", params);        } else {            params.put("UPDATER", userBean.getXTYHID());            params.put("CPBLTZDID", CPBLTZDID);            paramss.put("CPBLTZDID", CPBLTZDID);            txUpdateById(params);            update("Cpbltzdkkmx.updateByIdd", paramss);        }        //子表信息编辑        if (null != terpzjcpbltzdmxList && !terpzjcpbltzdmxList.isEmpty()) {            txChildEdit(CPBLTZDID, terpzjcpbltzdmxList);        }    }    /**     * * 根据主表Id查询子表记录     * * Description :     * * @param CPBLTZDID     * * @return.     *      * @param CPBLTZDID the cPBLTZDID     *      * @return the list< master slavemx model>     */    @Override    @SuppressWarnings("unchecked")    public List <MasterSlavemxModel> childQuery(String CPBLTZDID) {        Map params = new HashMap();        params.put("CPBLTZDID", CPBLTZDID);        //只查询0的记录。1为删除。0为正常        params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);        return this.findList("Cpbltzdmx.query", params);    }    /**     * * 根据主表Id查询子表记录     * * Description :     * * @param CPBLTZDID     * * @return.     *      * @param CPBLTZDID the cPBLTZDID     *      * @return the list< master slavemx model>     */    @Override    @SuppressWarnings("unchecked")    public List <MasterSlavemxModel> childQuerykk(String CPBLTZDID) {        Map params = new HashMap();        params.put("CPBLTZDID", CPBLTZDID);        //只查询0的记录。1为删除。0为正常        params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);        return this.findList("Cpbltzdkkmx.query", params);    }    /**     * * 根据子表Id批量加载子表信息     * * Description :     * * @param CPBLTZDIDs     * * @return.     *      * @param CPBLTZDMXIDs the cPBLTZDMXI ds     *      * @return the list< master slavemx model>     */    @Override    @SuppressWarnings("unchecked")    public List <MasterSlavemxModel> loadChilds(String CPBLTZDMXIDs) {        return findList("Cpbltzdmx.loadByIds", CPBLTZDMXIDs);    }    /**     * * 获取明细     * * Description :     * * @param CPBLTZDIDs     * * @return.     *      * @param CPZJTZDID the cPZJTZDID     *      * @return the list< master slavemx model>     */    @Override    @SuppressWarnings("unchecked")    public List <MasterSlavemxModel> mingxi(String CPZJTZDID) {        return findList("Cpbltzdmx.selByFkId", CPZJTZDID);    }    /**     * * 根据子表Id批量加载子表信息     * * Description :     * * @param CPBLTZDIDs     * * @return.     *      * @param CPBLTZDMXIDs the cPBLTZDMXI ds     *      * @return the list< master slavemx model>     */    @Override    @SuppressWarnings("unchecked")    public List <MasterSlavemxModel> loadChildskk(String CPBLTZDMXIDs) {        return findList("Cpbltzdkkmx.loadByIds", CPBLTZDMXIDs);    }    /**     * * 明细页面编辑。.     *      * @param CPBLTZDID the cPBLTZDID     * @param modelList the model list     *      * @return true, if tx child edit     */    @Override    public boolean txChildEdit(String CPBLTZDID, List <MasterSlavemxModel> modelList) {        //新增列表        List <Map <String, String>> addList = new ArrayList <Map <String, String>>();        //修改列表        List <Map <String, String>> updateList = new ArrayList <Map <String, String>>();        for (MasterSlavemxModel model : modelList) {            Map <String, String> params = new HashMap <String, String>();            params.put("CPBLTZDID", CPBLTZDID);            params.put("CPBLTZDMXID", model.getCPBLTZDMXID());            params.put("CPZJXMID", model.getCPZJXMID());            params.put("CPZJXMBH", model.getCPZJXMBH());            params.put("CPZJXMMC", model.getCPZJXMMC());            params.put("ZJXMLB", model.getZJXMLB());            params.put("YYBZ", model.getYYBZ());            params.put("JYCS", model.getJYCS());            params.put("HGBZ", model.getHGBZ());            params.put("JYZ", model.getJYZ());            params.put("JYJG", model.getJYJG());            params.put("RBJSSL", model.getRBJSSL());            params.put("BFSL", model.getBFSL());            params.put("THSL", model.getTHSL());            params.put("XSSL", model.getXSSL());            params.put("REMARK", model.getREMARK());            //如果没有明细ID的则是新增，有的是修改            if (StringUtils.isEmpty(model.getCPBLTZDMXID())) {                params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);                params.put("CPBLTZDMXID", StringUtil.uuid32len());                addList.add(params);            } else {                params.put("CPBLTZDMXID", model.getCPBLTZDMXID());                updateList.add(params);            }        }        if (!updateList.isEmpty()) {            this.batch4Update("Cpbltzdmx.updateById", updateList);        }        if (!addList.isEmpty()) {            this.batch4Update("Cpbltzdmx.insert", addList);        }        return true;    }    /**     * * 明细页面编辑。.     *      * @param CPBLTZDID the cPBLTZDID     * @param modelList the model list     *      * @return true, if tx child editkk     */    @Override    public boolean txChildEditkk(String CPBLTZDID, List <MasterSlavekkmxModel> modelList) {        //新增列表        List <Map <String, String>> addList = new ArrayList <Map <String, String>>();        //修改列表        List <Map <String, String>> updateList = new ArrayList <Map <String, String>>();        for (MasterSlavekkmxModel model : modelList) {            Map <String, String> params = new HashMap <String, String>();            params.put("CPBLTZDID", CPBLTZDID);            params.put("WLDWXXID", model.getWLDWXXID());            params.put("WLDWBH", model.getWLDWBH());            params.put("WLDWMC", model.getWLDWMC());            params.put("BLLB", model.getBLLB());            params.put("KKSL", model.getKKSL());            params.put("KKDJ", model.getKKDJ());            params.put("KKZK", model.getKKZK());            params.put("KKJE", model.getKKJE());            params.put("KKSM", model.getKKSM());            params.put("KKLXID", model.getKKLXID());            params.put("KKLX", model.getKKLX());            params.put("KKYY", model.getKKYY());            params.put("KKXM", model.getKKXM());            //如果没有明细ID的则是新增，有的是修改            if (StringUtils.isEmpty(model.getCPBLTZDKKDMXID())) {                params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);                params.put("CPBLTZDKKDMXID", StringUtil.uuid32len());                addList.add(params);            } else {                params.put("CPBLTZDKKDMXID", model.getCPBLTZDKKDMXID());                updateList.add(params);            }        }        if (!updateList.isEmpty()) {            this.batch4Update("Cpbltzdkkmx.updateById", updateList);        }        if (!addList.isEmpty()) {            this.batch4Update("Cpbltzdkkmx.insert", addList);        }        return true;    }    /**     * * 子表批量删除:软删除，只是更新装状态.     *      * @param CPBLTZDMXIDs the cPBLTZDMXI ds     */    @Override    public void txBatch4DeleteChild(String CPBLTZDMXIDs) {        update("Cpbltzdmx.deleteByIds", CPBLTZDMXIDs);    }    /**     * * 子表批量删除:软删除，只是更新装状态.     *      * @param CPBLTZDMXIDs the cPBLTZDMXI ds     */    @Override    public void txBatch4DeleteChildkk(String CPBLTZDMXIDs) {        update("Cpbltzdkkmx.deleteByIds", CPBLTZDMXIDs);    }    /**     * * 尺码明细信息加载.     *      * @param wlxxysid the wlxxysid     * @param cpcgddmxid the cpcgddmxid     * @param tempfkId the tempfk id     * @param SESSIONID the sESSIONID     * @param wlzhMap the wlzh map     *      * @return the map< string, map< string, string>>     */    @Override    @SuppressWarnings("unchecked")    public Map <String, Map <String, String>> loadCmmx(String wlxxysid, String cpcgddmxid, String tempfkId, String SESSIONID,            Map <String, String> wlzhMap) {        Map <String, Map <String, String>> cmmxMap = new LinkedHashMap <String, Map <String, String>>();        List cmList = null;        if (StringUtils.isNotEmpty(wlxxysid)) {            cmList = findList("CPBLTZDCMMX.queryCm", wlxxysid);        }        List cmmxList = null;        Map <String, String> param = new TreeMap <String, String>();        param.put("MXID", cpcgddmxid);        param.put("SESSIONID", SESSIONID);        cmmxList = findList("CPBLTZDCMMXTEMP.query", param);        if (!(null != cmmxList && !cmmxList.isEmpty())) {            cmmxList = findList("CPBLTZDCMMX.query", cpcgddmxid);        }        if (cmmxList == null) {            cmmxList = new ArrayList();        }        setCmsl(cmmxMap, cmList, cmmxList, wlzhMap);        return cmmxMap;    }    /**     * * 设置尺码数量 Description :     * *     * * @param cmmxMap     * * @param mxmap.     *      * @param cmmxMap the cmmx map     * @param cmList the cm list     * @param cmmxList the cmmx list     * @param wlzhMap the wlzh map     */    @SuppressWarnings("unchecked")    private void setCmsl(Map cmmxMap, List <Map <String, String>> cmList, List cmmxList, Map <String, String> wlzhMap) {        if (cmList != null) {            for (int i = 0; i < cmList.size(); i++) {                Map <String, String> sl = new HashMap <String, String>();                for (int j = 0; j < cmmxList.size(); j++) {                    Map <String, String> param = (Map) cmmxList.get(j);                    String cmsl = "";                    if (cmList.get(i).get("CM").equals(param.get("CM"))) {                        cmsl = String.valueOf(param.get("THCMSL"));                        if ("0".equals(cmsl)) {                            cmsl = "";                        }                        sl.put("THCMSL", cmsl);                        cmsl = String.valueOf(param.get("RBJSCMSL"));                        if ("0".equals(cmsl)) {                            cmsl = "";                        }                        sl.put("RBJSCMSL", cmsl);                        cmsl = String.valueOf(param.get("BFCMSL"));                        if ("0".equals(cmsl)) {                            cmsl = "";                        }                        sl.put("BFCMSL", cmsl);                        cmsl = String.valueOf(param.get("XSCMSL"));                        if ("0".equals(cmsl)) {                            cmsl = "";                        }                        sl.put("XSCMSL", cmsl);                    }                }                cmmxMap.put(cmList.get(i).get("CM"), sl);                wlzhMap.put(cmList.get(i).get("CM"), cmList.get(i).get("WLZHID"));            }        }    }    /**     * * 尺码明细编辑（中间表操作）.     *      * @param cmmxModel the cmmx model     */    @Override    public void txCmmxEdit(List <MasterSlavecmmxzjbModel> cmmxModel) {        List <Map <String, String>> addList = new ArrayList <Map <String, String>>();        String id = "";        for (int i = 0; i < cmmxModel.size(); i++) {            Map <String, String> params = new HashMap <String, String>();            id = cmmxModel.get(i).getTEMPID();            params.put("CM", cmmxModel.get(i).getCM());            params.put("THCMSL", cmmxModel.get(i).getTHCMSL());            params.put("RBJSCMSL", cmmxModel.get(i).getRBJSCMSL());            params.put("BFCMSL", cmmxModel.get(i).getBFCMSL());            params.put("XSCMSL", cmmxModel.get(i).getXSCMSL());            params.put("SESSIONID", cmmxModel.get(i).getSESSIONID());            params.put("CPBLTZDCMMXID", StringUtil.uuid32len());            params.put("WLZHID", cmmxModel.get(i).getWLZHID());            params.put("MXID", id);            addList.add(params);        }        // 先全部删除        delete("CPBLTZDCMMXTEMP.delete", id);        if (!addList.isEmpty()) {            // 直接插入            this.batch4Update("CPBLTZDCMMXTEMP.insert", addList);        }    }    /**     * * 删除中间表过期数据.     */    @Override    public void deleteTempData() {        delete("CPBLTZDCMMXTEMP.deleteDataOutOfDate", null);    }}
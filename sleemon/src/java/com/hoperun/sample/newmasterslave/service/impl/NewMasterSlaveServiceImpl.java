/** * 项目名称：平台 * 系统名：质检管理 * 文件名：CpbltzdServiceImpl.java*/package com.hoperun.sample.newmasterslave.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import com.hoperun.commons.exception.ServiceException;import com.hoperun.commons.model.BusinessConsts;import com.hoperun.commons.model.IListPage;import com.hoperun.commons.service.BaseService;import com.hoperun.commons.util.StringUtil;import com.hoperun.sample.newmasterslave.model.NewMasterSlaveModel;import com.hoperun.sample.newmasterslave.model.NewMasterSlavemxModel;import com.hoperun.sample.newmasterslave.service.NewMasterSlaveService;import com.hoperun.sys.model.UserBean;// TODO: Auto-generated Javadoc/** * * @module 库存管理 * * @fuc 成品不良通知单 * * @version 1.1 * * @author zhuxw */public class NewMasterSlaveServiceImpl extends BaseService implements NewMasterSlaveService {    /**     * * 查询并分页     * * @param params map对象     * * @param pageNo 页码.     *      * @param params the params     * @param pageNo the page no     *      * @return the i list page     */    public IListPage pageQuery(Map params, int pageNo) {        return this.pageQuery("NewCpbltzd.pageQuery", "NewCpbltzd.pageCount", params, pageNo);    }    /**     * * 加载     * * @param param 主键字段值.     *      * @param param the param     *      * @return the map< string, string>     */    public Map <String, String> load(String param) {        return (Map <String, String>) load("NewCpbltzd.loadById", param);    }    /**     * * 插入数据     * * @param params map对象.     *      * @param params the params     *      * @return true, if tx insert     */    public boolean txInsert(Map <String, String> params) {        insert("NewCpbltzd.insert", params);        return true;    }    /**     * * 更新数据     * * @param params map对象.     *      * @param params the params     *      * @return true, if tx update by id     */    public boolean txUpdateById(Map <String, String> params) {        return update("NewCpbltzd.updateById", params);    }    /**     * * 记录删除 :软删除,只更新状态     * * Description :     * * @param CPBLTZDID     * * @return.     *      * @param CPBLTZDID the cPBLTZDID     *      * @return true, if tx delete     */    @Override    public boolean txDelete(Map <String, String> params) {        //删除父        update("NewCpbltzd.delete", params);        //删除子表        return update("NewCpbltzdmx.deleteByFkId", params);    }    /**     * * 主表及子表编辑 新增/修改。     * * Description :     * * @param CPBLTZDID     * * @param cpbltzdModel     * * @param terpzjcpbltzdmxList.     *      * @param CPBLTZDID the cPBLTZDID     * @param userBean the user bean     * @param cpbltzdModel the cpbltzd model     * @param terpzjcpbltzdmxList the terpzjcpbltzdmx list     */    @Override    public void txEdit(String CPBLTZDID, UserBean userBean, NewMasterSlaveModel cpbltzdModel, List <NewMasterSlavemxModel> terpzjcpbltzdmxList) {        try {									Map <String, String> params = new HashMap <String, String>();			params.put("CPZJDBH", cpbltzdModel.getCPZJDBH());			params.put("WLDWBH", cpbltzdModel.getWLDWBH());			params.put("WLDWMC", cpbltzdModel.getWLDWMC());			params.put("YSMC", cpbltzdModel.getYSMC());			params.put("WLBH", cpbltzdModel.getWLBH());			params.put("WLXXID", cpbltzdModel.getWLXXID());			params.put("PP", cpbltzdModel.getPP());			params.put("NF", cpbltzdModel.getNF());			params.put("JJ", cpbltzdModel.getJJ());			params.put("WLXXYSID", cpbltzdModel.getWLXXYSID());			params.put("CPZJTZDID", cpbltzdModel.getCPZJTZDID());			params.put("WLDWXXID", cpbltzdModel.getWLDWXXID());			params.put("WLMC", cpbltzdModel.getWLMC());			params.put("THSL", cpbltzdModel.getTHSL());			params.put("TZBHGSL", cpbltzdModel.getTZBHGSL());			params.put("KTZBHGSL", cpbltzdModel.getKTZBHGSL());			params.put("YTZBHGSL", cpbltzdModel.getYTZBHGSL());			params.put("RBJSSL", cpbltzdModel.getRBJSSL());			params.put("BFSL", cpbltzdModel.getBFSL());			params.put("XSSL", cpbltzdModel.getXSSL());			params.put("YSBH", cpbltzdModel.getYSBH());			params.put("JYRID", cpbltzdModel.getJYRID());			params.put("JYRXM", cpbltzdModel.getJYRXM());			params.put("JYSJ", cpbltzdModel.getJYSJ());			params.put("WBYYBJ", cpbltzdModel.getWBYYBJ());			params.put("TZSL", cpbltzdModel.getTZSL());			params.put("CLYJ", cpbltzdModel.getCLYJ());			params.put("REMARK", cpbltzdModel.getREMARK());			params.put("LCH", cpbltzdModel.getLCH() == null ? "" : cpbltzdModel.getLCH());            //如果lxllId为空，说明是新增记录			if (StringUtil.isEmpty(CPBLTZDID)) {			    CPBLTZDID = StringUtil.uuid32len();			    String CPBLTZDBH="";			        //CPBLTZDBH = LogicUtil.getBmgz("ERP_ZJ_CPBLTZDBH");			    	//实际开发中应该通过编码规则获取，在该例子中获取当前时间，只是为了做演示。			    CPBLTZDBH= String.valueOf(new Date().getTime());			    params.put("CPBLTZDBH", CPBLTZDBH);			    params.put("CPBLTZDID", CPBLTZDID);			    params.put("CREATER", userBean.getXTYHID());			    params.put("CRENAME", userBean.getXM());			    params.put("STATE", BusinessConsts.UNCOMMIT);			    params.put("BMMC", userBean.getBMMC());			    params.put("JGMC", userBean.getJGMC());			    params.put("DELFLAG", BusinessConsts.YJLBJ_FLAG_FALSE);			    params.put("JGXXID", userBean.getJGXXID());			    params.put("ZTXXID", userBean.getLoginZTXXID());			    params.put("BMXXID", userBean.getBMXXID());			    insert("NewCpbltzd.insert", params);			} else {			    params.put("UPDATER", userBean.getXTYHID());			    params.put("CPBLTZDID", CPBLTZDID);                txUpdateById(params);			}			//子表信息编辑			if (null != terpzjcpbltzdmxList && !terpzjcpbltzdmxList.isEmpty()) {			    txChildEdit(CPBLTZDID, terpzjcpbltzdmxList);			}		} catch (Exception e) {			e.printStackTrace();			throw new ServiceException("保存出错!");		}    }    /**     * * 根据主表Id查询子表记录     * * Description :     * * @param CPBLTZDID     * * @return.     *      * @param CPBLTZDID the cPBLTZDID     *      * @return the list< new master slavemx model>     */    @Override    @SuppressWarnings("unchecked")    public List <NewMasterSlavemxModel> childQuery(String CPBLTZDID) {        Map params = new HashMap();        params.put("CPBLTZDID", CPBLTZDID);        //只查询0的记录。1为删除。0为正常        params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);        return this.findList("NewCpbltzdmx.query", params);    }  /**   * * 根据子表Id批量加载子表信息   * * Description :   * * @param CPBLTZDIDs   * * @return.   *    * @param CPBLTZDMXIDs the cPBLTZDMXI ds   *    * @return the list< new master slavemx model>   */    @Override    @SuppressWarnings("unchecked")    public List <NewMasterSlavemxModel> loadChilds(String CPBLTZDMXIDs) {        return findList("NewCpbltzdmx.loadByIds", CPBLTZDMXIDs);    }     /**     * * 明细页面编辑。.     *      * @param CPBLTZDID the cPBLTZDID     * @param modelList the model list     *      * @return true, if tx child edit     */    @Override    public boolean txChildEdit(String CPBLTZDID, List <NewMasterSlavemxModel> modelList) {        //新增列表        List <Map <String, String>> addList = new ArrayList <Map <String, String>>();        //修改列表        List <Map <String, String>> updateList = new ArrayList <Map <String, String>>();        for (NewMasterSlavemxModel model : modelList) {            Map <String, String> params = new HashMap <String, String>();            params.put("CPBLTZDID", CPBLTZDID);            params.put("CPBLTZDMXID", model.getCPBLTZDMXID());            params.put("CPZJXMID", model.getCPZJXMID());            params.put("CPZJXMBH", model.getCPZJXMBH());            params.put("CPZJXMMC", model.getCPZJXMMC());            params.put("ZJXMLB", model.getZJXMLB());            params.put("YYBZ", model.getYYBZ());            params.put("JYCS", model.getJYCS());            params.put("HGBZ", model.getHGBZ());            params.put("JYZ", model.getJYZ());            params.put("JYJG", model.getJYJG());            params.put("RBJSSL", model.getRBJSSL());            params.put("BFSL", model.getBFSL());            params.put("THSL", model.getTHSL());            params.put("XSSL", model.getXSSL());            params.put("REMARK", model.getREMARK());            //如果没有明细ID的则是新增，有的是修改            if (StringUtil.isEmpty(model.getCPBLTZDMXID())) {                params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);                params.put("CPBLTZDMXID", StringUtil.uuid32len());                addList.add(params);            } else {                params.put("CPBLTZDMXID", model.getCPBLTZDMXID());                updateList.add(params);            }        }        if (!updateList.isEmpty()) {            this.batch4Update("NewCpbltzdmx.updateById", updateList);        }        if (!addList.isEmpty()) {            this.batch4Update("NewCpbltzdmx.insert", addList);        }        return true;    }       /**     * * 子表批量删除:软删除，只是更新装状态.     *      * @param CPBLTZDMXIDs the cPBLTZDMXI ds     */    @Override    public void txBatch4DeleteChild(String CPBLTZDMXIDs) {        update("NewCpbltzdmx.deleteByIds", CPBLTZDMXIDs);    }}
/** * 项目名称：平台 * 系统名：质检管理 * 文件名：CpbltzdAction.java*/package com.hoperun.sample.newmasterslave.action;import java.io.PrintWriter;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.hoperun.commons.action.BaseAction;import com.hoperun.commons.exception.ServiceException;import com.hoperun.commons.model.BusinessConsts;import com.hoperun.commons.model.Consts;import com.hoperun.commons.model.IListPage;import com.hoperun.commons.util.ParamUtil;import com.hoperun.commons.util.QXUtil;import com.hoperun.commons.util.StringUtil;import com.hoperun.sample.newmasterslave.model.NewMasterSlaveModel;import com.hoperun.sample.newmasterslave.model.NewMasterSlavemxModel;import com.hoperun.sample.newmasterslave.service.NewMasterSlaveService;import com.hoperun.sys.model.UserBean;/** * * @module 库存管理 * * @fuc 成品不良通知单 * * @version 1.1 * * @author zhuxw */public class NewMasterSlaveAction extends BaseAction {    private NewMasterSlaveService newMasterSlaveService;	/** 权限对象**/    /** 维护*/    //维护界面    //增删改查    private static String PVG_BWS="BS0010301";    private static String PVG_EDIT="BS0010302";    private static String PVG_DELETE="BS0010303";    //启用,停用    private static String PVG_START_STOP="";    //确认，取消    private static String PVG_FINISH_CANCLE="";    /**end*/    /**审批维护必须维护字段**/    //提交撤销    private static String PVG_COMMIT_CANCLE="BS0010305";    private static String PVG_TRACE="BS0010306";    //审核模块    private static String PVG_BWS_AUDIT="BS0010401";    private static String PVG_AUDIT_AUDIT="BS0010402";    private static String PVG_TRACE_AUDIT="BS0010403";    //审批流参数    private static String AUD_TAB_NAME="T_ERP_ZJ_CPBLTZD";    private static String AUD_TAB_KEY="CPBLTZDID";    private static String AUD_BUSS_STATE="STATE";    private static String AUD_BUSS_TYPE="ERP_ZJGL_CPBLTZSP";    private static String AUD_FLOW_INS="com.hoperun.sample.newmasterslave.service.impl.NewMasterSlaveFlowInterface";    /**审批 end**/  	/**	 * Sets the new master slave service.	 * 	 * @param newMasterSlaveService the new new master slave service	 */	public void setNewMasterSlaveService(NewMasterSlaveService newMasterSlaveService) {		this.newMasterSlaveService = newMasterSlaveService;	}	/**	 * * 成品不良品通知单信息框架页面	 * @param mapping the mapping	 * @param form the form	 * @param request the request	 * @param response the response	 * 	 * @return the action forward	 */    public ActionForward toFrame(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {        //设置跳转时需要的一些公用属性        ParamUtil.setCommAttributeEx(request);        request.setAttribute("paramUrl", ParamUtil.utf8Decoder(request, "paramUrl"));        return mapping.findForward("frames");    }    /**     * * 查询结果列表     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_BWS))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        Map <String, String> params = new HashMap <String, String>();        ParamUtil.putStr2Map(request, "CPBLTZDBH", params);        ParamUtil.putStr2Map(request, "CPZJDBH", params);        ParamUtil.putStr2Map(request, "WLDWBH", params);        params.put("WLDWMC", ParamUtil.utf8Decoder(request, "WLDWMC"));        ParamUtil.putStr2Map(request, "WLBH", params);        params.put("WLMC", ParamUtil.utf8Decoder(request, "WLMC"));        ParamUtil.putStr2Map(request, "PP", params);        ParamUtil.putStr2Map(request, "NF", params);        ParamUtil.putStr2Map(request, "JJ", params);        params.put("YSMC", ParamUtil.utf8Decoder(request, "YSMC"));        ParamUtil.putStr2Map(request, "WLXXYSID", params);        ParamUtil.putStr2Map(request, "TZSL", params);        ParamUtil.putStr2Map(request, "THSL", params);        ParamUtil.putStr2Map(request, "TZBHGSL", params);        ParamUtil.putStr2Map(request, "RBJSSL", params);        ParamUtil.putStr2Map(request, "BFSL", params);        ParamUtil.putStr2Map(request, "XSSL", params);        ParamUtil.putStr2Map(request, "STATE", params);        params.put("JYRXM", ParamUtil.utf8Decoder(request, "JYRXM"));        params.put("BMMC", ParamUtil.utf8Decoder(request, "BMMC"));        params.put("CRENAME", ParamUtil.utf8Decoder(request, "CRENAME"));        ParamUtil.putStr2Map(request, "frCRETIME", params);        ParamUtil.putStr2Map(request, "toCRETIME", params);		String search = ParamUtil.get(request,"search");		String module = ParamUtil.get(request,"module");		System.err.println("search==="+search+"======module===="+module);        //权限级别和审批流的封装以及状态的封装		params.put("QXJBCON", ParamUtil.getPvgCon(search,module,PVG_BWS,PVG_BWS_AUDIT,AUD_TAB_KEY, AUD_TAB_NAME,AUD_BUSS_TYPE,AUD_BUSS_STATE,userBean));        //只查询0的记录。1为删除。0为正常        params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);        //字段排序        ParamUtil.setOrderField(request, params, "u.CRETIME", "DESC");        int pageNo = ParamUtil.getInt(request, "pageNo", 1);        ParamUtil.putStr2Map(request, "pageSize", params);        IListPage page = newMasterSlaveService.pageQuery(params, pageNo);        request.setAttribute("params",params);        request.setAttribute("pvg",setPvg(userBean));        request.setAttribute("page", page);        return mapping.findForward("list");    }        /**     * * 明细列表     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward childList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_BWS))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        String CPBLTZDID =ParamUtil.get(request, "CPBLTZDID");        if(!StringUtil.isEmpty(CPBLTZDID))        {        	 List <NewMasterSlavemxModel> result = newMasterSlaveService.childQuery(CPBLTZDID);             request.setAttribute("rst", result);        }        request.setAttribute("pvg",setPvg(userBean));        return mapping.findForward("childlist");    }    /**     * *     * * 成品不良品通知单编辑框架页面     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toEditFrame(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_EDIT))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        //设置跳转时需要的一些公用属性        ParamUtil.setCommAttributeEx(request);        request.setAttribute("paramUrl", ParamUtil.utf8Decoder(request, "paramUrl"));        return mapping.findForward("editFrame");    }    /**     * * 修改页面跳转     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toParentEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_EDIT))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        String selRowId = ParamUtil.get(request, "selRowId");        if(!StringUtil.isEmpty(selRowId))        {        	Map <String, String> entry = newMasterSlaveService.load(selRowId);            request.setAttribute("rst", entry);	        }        return mapping.findForward("toedit");    }    /**     * * 明细编辑跳转页面     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toChildEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_EDIT))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}    	//多个Id批量查询，用逗号隔开        String CPBLTZDMXIDs = request.getParameter("CPBLTZDMXIDS");        //没有零星领料Id可以直接跳转。        if (!StringUtil.isEmpty(CPBLTZDMXIDs)) {            List <NewMasterSlavemxModel> list = newMasterSlaveService.loadChilds(CPBLTZDMXIDs);            request.setAttribute("rst", list);        }        return mapping.findForward("childedit");    }    /**     * * 编辑页面加载子页面     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward modifyToChildEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_EDIT))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");        if(!StringUtil.isEmpty(CPBLTZDID))        {        	 List <NewMasterSlavemxModel> result = newMasterSlaveService.childQuery(CPBLTZDID);             request.setAttribute("rst", result);        }        return mapping.findForward("childedit");    }    /**     * * 编辑//新增或修改。     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_EDIT))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");            String parentJsonData = ParamUtil.get(request, "parentJsonData");            NewMasterSlaveModel cpbltzdModel = new Gson().fromJson(parentJsonData, new TypeToken <NewMasterSlaveModel>() {}.getType());            String jsonDate = ParamUtil.get(request, "childJsonData");            List <NewMasterSlavemxModel> terpzjcpbltzdmxList = null;            if (!StringUtil.isEmpty(jsonDate)) {                terpzjcpbltzdmxList = new Gson().fromJson(jsonDate, new TypeToken <List <NewMasterSlavemxModel>>() {                }.getType());            }            newMasterSlaveService.txEdit(CPBLTZDID, userBean, cpbltzdModel, terpzjcpbltzdmxList);        } catch (Exception e) {            jsonResult = jsonResult(false, "保存失败");            e.printStackTrace();        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }    /**     * * 明细编辑     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void childEdit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_EDIT))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDID = request.getParameter("CPBLTZDID");            String jsonDate = request.getParameter("childJsonData");            if (!StringUtil.isEmpty(jsonDate)) {                List <NewMasterSlavemxModel> modelList = new Gson().fromJson(jsonDate, new TypeToken <List <NewMasterSlavemxModel>>() {                }.getType());                newMasterSlaveService.txChildEdit(CPBLTZDID, modelList);            }        } catch (Exception e) {            jsonResult = jsonResult(false, "保存失败");            e.printStackTrace();        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }       /**     * * 删除成品不良品通知单     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_DELETE))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");            Map <String, String> params = new HashMap <String, String>();            params.put("CPBLTZDID", CPBLTZDID);		    params.put("DATARECYCLEID", StringUtil.uuid32len());		    params.put("DELETOR", userBean.getYHM());		    params.put("UPDATER", userBean.getXTYHID());		    params.put("UPDNAME", userBean.getYHM());		    params.put("DELFLAG", BusinessConsts.DEL_FLAG_DROP);            newMasterSlaveService.txDelete(params);            newMasterSlaveService.clearCaches(params);        } catch (Exception e) {            jsonResult = jsonResult(false, "删除失败");            e.printStackTrace();        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }    /**     * * 明细批量删除     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void childDelete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_DELETE))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        try {            String CPBLTZDMXIDs = request.getParameter("CPBLTZDMXIDS");            //批量删除，多个Id之间用逗号隔开            newMasterSlaveService.txBatch4DeleteChild(CPBLTZDMXIDs);        } catch (Exception e) {            jsonResult = jsonResult(false, "删除失败");            e.printStackTrace();        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }     /**     * * 查看成品不良品通知单详细信息     * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     *      * @return the action forward     */    public ActionForward toDetail(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_BWS))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}        String CPBLTZDID = ParamUtil.get(request, "CPBLTZDID");        if (!StringUtil.isEmpty(CPBLTZDID)) {            Map <String, String> entry = newMasterSlaveService.load(CPBLTZDID);            request.setAttribute("rst", entry);        }        return mapping.findForward("todetail");    }    /**     * * 提交时，校验是否有明细.     *      * @param mapping the mapping     * @param form the form     * @param request the request     * @param response the response     */    public void toCommit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {    	UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_COMMIT_CANCLE))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}    	PrintWriter writer = getWriter(response);        String jsonResult = jsonResult();        String errorId = "";        try {            String CPBLTZDID = request.getParameter("CPBLTZDID");            List <NewMasterSlavemxModel> list = newMasterSlaveService.childQuery(CPBLTZDID);            if (list.size() == 0) {                errorId = "0";                throw new Exception();            }        } catch (Exception e) {            if ("0".equals(errorId)) {                jsonResult = jsonResult(false, "没有明细，不能提交!");            } else {                jsonResult = jsonResult(false, "提交失败");            }           e.printStackTrace();        }        if (null != writer) {            writer.write(jsonResult);            writer.close();        }    }        /**	 * * 设置权限Map	 * @param UserBean the userBean	 * @return Map<String,String>	 */    private Map<String,String> setPvg(UserBean userBean)    {    	Map<String,String>pvgMap=new HashMap<String,String>();    	pvgMap.put("PVG_BWS",QXUtil.checkPvg(userBean, PVG_BWS));    	pvgMap.put("PVG_EDIT",QXUtil.checkPvg(userBean, PVG_EDIT));    	pvgMap.put("PVG_DELETE",QXUtil.checkPvg(userBean, PVG_DELETE)  );    	pvgMap.put("PVG_START_STOP",QXUtil.checkPvg(userBean, PVG_START_STOP) );    	pvgMap.put("PVG_COMMIT_CANCLE",QXUtil.checkPvg(userBean, PVG_COMMIT_CANCLE) );    	pvgMap.put("PVG_TRACE",QXUtil.checkPvg(userBean, PVG_TRACE)  );    	pvgMap.put("PVG_BWS_AUDIT",QXUtil.checkPvg(userBean, PVG_BWS_AUDIT)  );    	pvgMap.put("PVG_AUDIT_AUDIT",QXUtil.checkPvg(userBean, PVG_AUDIT_AUDIT) );    	pvgMap.put("PVG_FINISH_CANCLE",QXUtil.checkPvg(userBean, PVG_FINISH_CANCLE) );    	pvgMap.put("PVG_TRACE_AUDIT",QXUtil.checkPvg(userBean, PVG_TRACE_AUDIT) );    	pvgMap.put("AUD_TAB_NAME",AUD_TAB_NAME);    	pvgMap.put("AUD_TAB_KEY",AUD_TAB_KEY);    	pvgMap.put("AUD_BUSS_STATE",AUD_BUSS_STATE);    	pvgMap.put("AUD_BUSS_TYPE",AUD_BUSS_TYPE);    	pvgMap.put("AUD_FLOW_INS",AUD_FLOW_INS);    	return  pvgMap;    }}
/** * 项目名称：平台 * 系统名： * 文件名：Notice.java*/package com.hoperun.sys.action;import java.io.PrintWriter;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.hoperun.commons.action.BaseAction;import com.hoperun.commons.exception.ServiceException;import com.hoperun.commons.model.BusinessConsts;import com.hoperun.commons.model.Consts;import com.hoperun.commons.model.IListPage;import com.hoperun.commons.util.LogicUtil;import com.hoperun.commons.util.ParamUtil;import com.hoperun.commons.util.QXUtil;import com.hoperun.commons.util.StringUtil;import com.hoperun.sample.grant.action.GrantAction;import com.hoperun.sys.model.NotcAreaModel;import com.hoperun.sys.model.NotcDeptModel;import com.hoperun.sys.model.NoticeModel;import com.hoperun.sys.model.UserBean;import com.hoperun.sys.service.NoticeService;/** * *@module * *@func * *@version 1.1 * *@author zhuxw * *@createdate 2011-11-16 */public class NoticeAction extends BaseAction {			/**日志**/	private Logger logger = Logger.getLogger(GrantAction.class);	/** 权限对象**/    /** 维护*/    //维护界面    //增删改查    private static String PVG_BWS="XT0011401";    private static String PVG_EDIT="XT0011402";    private static String PVG_DELETE="XT0011403";    //启用,停用    private static String PVG_START_STOP="";    //确认，取消    private static String PVG_FINISH_CANCLE="";    //关闭    private static String PVG_CLOSE="XT0011407";    /**end*/    /**审批维护必须维护字段**/    //提交撤销    private static String PVG_COMMIT_CANCLE="XT0011404";    private static String PVG_TRACE="XT0011404";        //审核模块    private static String PVG_BWS_AUDIT="XT0011406";    private static String PVG_AUDIT_AUDIT="XT0011406";    private static String PVG_TRACE_AUDIT="XT0011405";         //审批流参数    private static String AUD_TAB_NAME = "T_SYS_NOTICE";//表名    private static String AUD_TAB_KEY = "NOTICE_ID"; //主键	private static String AUD_BUSS_STATE = "STATE";    private static String AUD_BUSS_TYPE = "SYS_NOTICE_AUDIT";	private static String AUD_FLOW_INS = "com.hoperun.sys.service.PublicFlowInterface";    /**审批 end**/		/** 业务逻辑对象. */	private NoticeService noticeService;	/**	 * Sets the notice service.	 * 	 * @param noticeService the new notice service	 */	public void setNoticeService(NoticeService noticeService) {		this.noticeService = noticeService;	}	/**	 * * 信息框架页面	 * * @param mapping	 * * @param form	 * * @param request	 * * @param response	 * * @return.	 * 	 * @param mapping the mapping	 * @param form the form	 * @param request the request	 * @param response the response	 * 	 * @return the action forward	 */	public ActionForward toFrame(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		//设置跳转时需要的一些公用属性		ParamUtil.setCommAttributeEx(request);		request.setAttribute("paramUrl", ParamUtil.utf8Decoder(request, "paramUrl"));		return mapping.findForward("frames");	}	/**	 * * 查询结果列表	 * * @param mapping	 * * @param form	 * * @param request	 * * @param response	 * * @return.	 * 	 * @param mapping the mapping	 * @param form the form	 * @param request the request	 * @param response the response	 * 	 * @return the action forward	 */	public ActionForward toList(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {				UserBean userBean =  ParamUtil.getUserBean(request);		if(Consts.FUN_CHEK_PVG&&(!QXUtil.checkMKQX(userBean, PVG_BWS)&&!QXUtil.checkMKQX(userBean, PVG_BWS_AUDIT)))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}				Map<String,String> params = new HashMap<String,String> ();		ParamUtil.putStr2Map(request, "STATE", params);        ParamUtil.putStr2Map(request, "STATIME", params);        ParamUtil.putStr2Map(request, "ENDTIME", params);        ParamUtil.putStr2Map(request, "CRETIME_START", params);        ParamUtil.putStr2Map(request, "CRETIME_END", params);        ParamUtil.putStr2Map(request, "NOTICE_TYPE", params);        ParamUtil.putStr2Map(request, "STATE", params);		params.put("ZTXXID", userBean.getLoginZTXXID());		//只查询0的记录。1为删除。0为正常		params.put("DELFLAG",BusinessConsts.DEL_FLAG_COMMON);				String search = ParamUtil.get(request,"search");		String module = ParamUtil.get(request,"module");			String NOTICE_OBJ = ParamUtil.get(request,"NOTICE_OBJ");					StringBuffer qx = new StringBuffer(ParamUtil.getPvgCon(search,module,PVG_BWS,PVG_BWS_AUDIT,AUD_TAB_KEY, AUD_TAB_NAME,AUD_BUSS_TYPE,AUD_BUSS_STATE,userBean));		if(!StringUtil.isEmpty(NOTICE_OBJ)){			String tempSql = StringUtil.creCon("u.NOTICE_OBJ", NOTICE_OBJ, "");			qx.append(tempSql);		}		//权限级别和审批流的封装	    params.put("QXJBCON", qx.toString());		    		//字段排序		ParamUtil.setOrderField(request, params);		int pageNo = ParamUtil.getInt(request, "pageNo", 1);		ParamUtil.putStr2Map(request, "pageSize", params);		IListPage page = noticeService.pageQuery(params, pageNo);		request.setAttribute("params", params);		request.setAttribute("page", page);		request.setAttribute("pvg",setPvg(userBean));		request.setAttribute("module", module);		return mapping.findForward("list");	}	/**	 * * 查看详细信息	 * * @param mapping	 * * @param form	 * * @param request	 * * @param response	 * * @return.	 * 	 * @param mapping the mapping	 * @param form the form	 * @param request the request	 * @param response the response	 * 	 * @return the action forward	 */	public ActionForward toDetail(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {				UserBean userBean = ParamUtil.getUserBean(request);		if(Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_BWS))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}				String NOTICEID = ParamUtil.get(request, "NOTICEID");		if(StringUtils.isNotEmpty(NOTICEID)){			Map<String,String> entry = noticeService.load(NOTICEID);			request.setAttribute("rst", entry);		}				return mapping.findForward("todetail");	}	/**	 * * 删除	 * * @param mapping	 * * @param form	 * * @param request	 * * @param response	 * * @return.	 * 	 * @param mapping the mapping	 * @param form the form	 * @param request the request	 * @param response the response	 */	public void delete(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {				UserBean userBean =  ParamUtil.getUserBean(request);		if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_DELETE))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}				PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String NOTICEID = ParamUtil.get(request, "NOTICEID");			noticeService.txDelete(NOTICEID,userBean);			noticeService.clearCaches(NOTICEID);		} catch (Exception e) {			jsonResult = jsonResult(false, "删除失败");		}				if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}		/**	 * * 信息编辑初始化	 * * @param mapping	 * * @param form	 * * @param request	 * * @param response	 * * @return.	 * 	 * @param mapping the mapping	 * @param form the form	 * @param request the request	 * @param response the response	 * 	 * @return the action forward	 */	public ActionForward toEdit(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {				UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean, PVG_EDIT))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}    			String NOTICEID = ParamUtil.get(request, "NOTICEID");		if(StringUtils.isNotEmpty(NOTICEID)){			Map<String,String> entry = noticeService.load(NOTICEID);			request.setAttribute("rst", entry);		}				String ZTXXID = userBean.getLoginZTXXID();		request.setAttribute("ZTXXID", ZTXXID);		request.setAttribute("pvg", setPvg(userBean));		return mapping.findForward("toedit");	}	/**	 * * 信息编辑 新增/修改	 * * @param mapping	 * * @param form	 * * @param request	 * * @param response	 * * @return.	 * 	 * @param mapping the mapping	 * @param form the form	 * @param request the request	 * @param response the response	 */	public void edit(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {				UserBean userBean = ParamUtil.getUserBean(request);    	if(Consts.FUN_CHEK_PVG&&!QXUtil.checkMKQX(userBean,PVG_EDIT))    	{    		throw new ServiceException("对不起，您没有权限 !");    	}    			PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String jsonData = ParamUtil.get(request, "jsonData");			NoticeModel noticeModel = null;			if(StringUtils.isNotEmpty(jsonData)){				noticeModel = new Gson().fromJson(jsonData, new TypeToken<NoticeModel>(){}.getType());			}			String NOTICE = ParamUtil.get(request, "NOTICE");			noticeModel.setNOTICE(NOTICE);			String NOTICEID = ParamUtil.get(request, "NOTICEID");			noticeService.txEdit(NOTICEID,noticeModel,userBean);		} catch (Exception e){			e.printStackTrace();			jsonResult = jsonResult(false, "保存失败");		}				if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}			/**	 * * 明细列表	 * 	 * @param mapping	 *            the mapping	 * @param form	 *            the form	 * @param request	 *            the request	 * @param response	 *            the response	 * 	 * @return the action forward	 */	public ActionForward childList(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_BWS)) {			throw new ServiceException("对不起，您没有权限 !");		}		String noticeId = ParamUtil.get(request, "NOTICEID");		if (!StringUtil.isEmpty(noticeId)) {			List<NotcAreaModel> result = noticeService.childQuery(noticeId);			request.setAttribute("rst", result);		}		request.setAttribute("pvg", setPvg(userBean));		return mapping.findForward("childlist");	}					/**	 * * to 直接编辑明细页面	 * 	 * @param mapping	 *            the mapping	 * @param form	 *            the form	 * @param request	 *            the request	 * @param response	 *            the response	 * 	 * @return the action forward	 */	public ActionForward toChildEdit(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {			throw new ServiceException("对不起，您没有权限 !");		}		// 多个Id批量查询，用逗号隔开		String MXIDS = request.getParameter("MXIDS");		// 没有零星领料Id可以直接跳转。		if (!StringUtil.isEmpty(MXIDS)) {			Map<String, String> params = new HashMap<String, String>();			params.put("MXIDS", MXIDS);			List<NotcAreaModel> list = noticeService.loadChilds(params);			request.setAttribute("rst", list);		}		request.setAttribute("pvg", setPvg(userBean));		return mapping.findForward("childedit");	}		/**	 * * 子表 新增/修改数据	 * 	 * @param mapping	 *            the mapping	 * @param form	 *            the form	 * @param request	 *            the request	 * @param response	 *            the response	 */	public void childEdit(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {			throw new ServiceException("对不起，您没有权限 !");		}		PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String noticeId = request.getParameter("NOTICEID");			String jsonDate = request.getParameter("childJsonData");			String MXIDS = request.getParameter("MXIDS");			 			if (!StringUtil.isEmpty(jsonDate)) {				List<NotcAreaModel> modelList = new Gson().fromJson(						jsonDate, new TypeToken<List<NotcAreaModel>>() {						}.getType());								// 子表判断重复与否				String returnMessage = this.vailChild(noticeId, MXIDS,modelList);				if (!StringUtil.isEmpty(returnMessage)) {					jsonResult = jsonResult(false, returnMessage);				}else{					noticeService.txChildEdit(noticeId, modelList);				}				 			}		} catch (Exception e) {			jsonResult = jsonResult(false, "保存失败");			e.printStackTrace();		}		if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}	/**	 * 明细重复判断	 * 	 * @return	 */	@SuppressWarnings("unchecked")	private String vailChild(String pId, String chilIds,			List<NotcAreaModel> modelList) {		String returnMessage = null;		if ("''".equals(chilIds) || chilIds == "''") {			chilIds = "";		}		int size = modelList.size();		StringBuffer prdNOS = new StringBuffer();		// 如果页面的之无重复，在和同一区域下的数据库的值判断		if (size > 0) {			for (int i = 0; i < size; i++) {				prdNOS.append("'" + modelList.get(i).getAREA_NO() + "'");				if ((i + 1) != size) {					prdNOS.append(",");				}			}			Map<String, String> paramsMx = new HashMap<String, String>();			paramsMx.put("NOTICE_ID", pId);			paramsMx.put("AREANOS", prdNOS.toString());			paramsMx.put("CHILDIDS", chilIds);			List list = noticeService.findList(paramsMx);			if (null != list && list.size() > 0) {				returnMessage = "区域编号与已有的记录重复";			}		}		return returnMessage;	}		/**	 * * 明细批量删除	 * 	 * @param mapping	 *            the mapping	 * @param form	 *            the form	 * @param request	 *            the request	 * @param response	 *            the response	 */	public void childDelete(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_DELETE)) {			throw new ServiceException("对不起，您没有权限 !");		}		PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String NOTICEID = request.getParameter("NOTICEID");			String detIDs = request.getParameter("MXIDS");			// 批量删除，多个Id之间用逗号隔开			noticeService.txBatch4DeleteChild(NOTICEID,detIDs);		} catch (Exception e) {			jsonResult = jsonResult(false, "删除失败");			e.printStackTrace();		}		if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}	/**	 * 	 * 提交前校验 公告生效区域	 */	public void commit(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String NOTICEID = request.getParameter("NOTICEID");			// 批量删除，多个Id之间用逗号隔开			int count = noticeService.childQueryForInt(NOTICEID);			int deptCount = noticeService.childDeptQueryForInt(NOTICEID);			if(count>0 || deptCount>0){				jsonResult = jsonResult(true, "");			}else{				jsonResult = jsonResult(false, "请填写公告生效区域或者公告生效部门");			}		} catch (Exception e) {			jsonResult = jsonResult(false, "提交失败");			e.printStackTrace();		}		if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}			/**	 * 	 * 关闭	 */	public void toClose(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_CLOSE)) {			throw new ServiceException("对不起，您没有权限 !");		}		PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String NOTICEID = request.getParameter("NOTICEID");			noticeService.txClose(NOTICEID,userBean);			jsonResult = jsonResult(true, "关闭成功");		} catch (Exception e) {			jsonResult = jsonResult(false, "关闭失败");			e.printStackTrace();		}		if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}						/**	 * * 明细列表	 * 	 * @param mapping	 *            the mapping	 * @param form	 *            the form	 * @param request	 *            the request	 * @param response	 *            the response	 * 	 * @return the action forward	 */	public ActionForward childDeptList(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_BWS)) {			throw new ServiceException("对不起，您没有权限 !");		}		String noticeId = ParamUtil.get(request, "NOTICEID");		if (!StringUtil.isEmpty(noticeId)) {			List<NotcDeptModel> result = noticeService.childDeptQuery(noticeId);			request.setAttribute("rst", result);		}		request.setAttribute("pvg", setPvg(userBean));		return mapping.findForward("childDeptlist");	}					/**	 * * to 直接编辑明细页面	 * 	 * @param mapping	 *            the mapping	 * @param form	 *            the form	 * @param request	 *            the request	 * @param response	 *            the response	 * 	 * @return the action forward	 */	public ActionForward toChildDeptEdit(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {			throw new ServiceException("对不起，您没有权限 !");		}		// 多个Id批量查询，用逗号隔开		String MXIDS = request.getParameter("MXIDS");		// 没有零星领料Id可以直接跳转。		if (!StringUtil.isEmpty(MXIDS)) {			Map<String, String> params = new HashMap<String, String>();			params.put("MXIDS", MXIDS);			List<NotcDeptModel> list = noticeService.loadDeptChilds(params);			request.setAttribute("rst", list);		}		request.setAttribute("pvg", setPvg(userBean));		return mapping.findForward("childDeptedit");	}		/**	 * * 子表 新增/修改数据	 * 	 * @param mapping	 *            the mapping	 * @param form	 *            the form	 * @param request	 *            the request	 * @param response	 *            the response	 */	public void childDeptEdit(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {			throw new ServiceException("对不起，您没有权限 !");		}		PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String noticeId = request.getParameter("NOTICEID");			String jsonDate = request.getParameter("childJsonData");			String MXIDS = request.getParameter("MXIDS");			 			if (!StringUtil.isEmpty(jsonDate)) {				List<NotcDeptModel> modelList = new Gson().fromJson(						jsonDate, new TypeToken<List<NotcDeptModel>>() {						}.getType());								// 子表判断重复与否				String returnMessage = this.vailDeptChild(noticeId, MXIDS,modelList);				if (!StringUtil.isEmpty(returnMessage)) {					jsonResult = jsonResult(false, returnMessage);				}else{					noticeService.txChildDeptEdit(noticeId, modelList);					jsonResult = jsonResult(true, "保存成功"); 				}							}		} catch (Exception e) {			jsonResult = jsonResult(false, "保存失败");			e.printStackTrace();		}		if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}			/**	 * 明细重复判断	 * 	 * @return	 */	@SuppressWarnings("unchecked")	private String vailDeptChild(String pId, String chilIds,			List<NotcDeptModel> modelList) {		String returnMessage = null;		if ("''".equals(chilIds) || chilIds == "''") {			chilIds = "";		}		int size = modelList.size();		StringBuffer DEPT_IDS = new StringBuffer();		// 如果页面的之无重复，在和同一区域下的数据库的值判断		if (size > 0) {			for (int i = 0; i < size; i++) {				DEPT_IDS.append("'" + modelList.get(i).getDEPT_ID() + "'");				if ((i + 1) != size) {					DEPT_IDS.append(",");				}			}			Map<String, String> paramsMx = new HashMap<String, String>();			paramsMx.put("NOTICE_ID", pId);			paramsMx.put("DEPT_IDS", DEPT_IDS.toString());			paramsMx.put("CHILDIDS", chilIds);			List list = noticeService.findDeptList(paramsMx);			if (null != list && list.size() > 0) {				returnMessage = "部门与已有的记录重复";			}		}		return returnMessage;	}			/**	 * * 明细批量删除	 * 	 * @param mapping	 *            the mapping	 * @param form	 *            the form	 * @param request	 *            the request	 * @param response	 *            the response	 */	public void childDeptDelete(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_DELETE)) {			throw new ServiceException("对不起，您没有权限 !");		}		PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String NOTICEID = request.getParameter("NOTICEID");			String detIDs = request.getParameter("MXIDS");			// 批量删除，多个Id之间用逗号隔开			noticeService.txBatch4DeleteDeptChild(NOTICEID,detIDs);		} catch (Exception e) {			jsonResult = jsonResult(false, "删除失败");			e.printStackTrace();		}		if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}			/**	 * * 设置权限Map	 * @param UserBean the userBean	 * @return Map<String,String>	 */	 private Map<String,String> setPvg(UserBean userBean)	    {	    	Map<String,String>pvgMap=new HashMap<String,String>();	    	pvgMap.put("PVG_BWS",QXUtil.checkPvg(userBean, PVG_BWS));	    	pvgMap.put("PVG_EDIT",QXUtil.checkPvg(userBean, PVG_EDIT));	    	pvgMap.put("PVG_DELETE",QXUtil.checkPvg(userBean, PVG_DELETE)  );	    	pvgMap.put("PVG_START_STOP",QXUtil.checkPvg(userBean, PVG_START_STOP) );	    	pvgMap.put("PVG_COMMIT_CANCLE",QXUtil.checkPvg(userBean, PVG_COMMIT_CANCLE) );	    	pvgMap.put("PVG_TRACE",QXUtil.checkPvg(userBean, PVG_TRACE)  );	    	pvgMap.put("PVG_BWS_AUDIT",QXUtil.checkPvg(userBean, PVG_BWS_AUDIT)  );	    	pvgMap.put("PVG_AUDIT_AUDIT",QXUtil.checkPvg(userBean, PVG_AUDIT_AUDIT) );	    	pvgMap.put("PVG_FINISH_CANCLE",QXUtil.checkPvg(userBean, PVG_FINISH_CANCLE) );	    	pvgMap.put("PVG_TRACE_AUDIT",QXUtil.checkPvg(userBean, PVG_TRACE_AUDIT) );	    	pvgMap.put("PVG_CLOSE",QXUtil.checkPvg(userBean, PVG_CLOSE) );			pvgMap.put("AUD_TAB_NAME",AUD_TAB_NAME);    	    pvgMap.put("AUD_TAB_KEY",AUD_TAB_KEY);    	    pvgMap.put("AUD_BUSS_STATE",AUD_BUSS_STATE);    	    pvgMap.put("AUD_BUSS_TYPE",AUD_BUSS_TYPE);			pvgMap.put("AUD_FLOW_INS",AUD_FLOW_INS);	    	return  pvgMap;	   }}

/** * 项目名称：平台 * 系统名： * 文件名：Notice.java*/package com.hoperun.sys.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import com.hoperun.commons.model.BusinessConsts;import com.hoperun.commons.model.IListPage;import com.hoperun.commons.service.BaseService;import com.hoperun.commons.util.DateUtil;import com.hoperun.commons.util.StringUtil;import com.hoperun.sys.model.NotcAreaModel;import com.hoperun.sys.model.NotcDeptModel;import com.hoperun.sys.model.NoticeModel;import com.hoperun.sys.model.UserBean;import com.hoperun.sys.service.NoticeService;// TODO: Auto-generated Javadoc/** * *@module * *@func * *@version 1.1 * *@author zhuxw * *@createdate 2011-11-16 */public class NoticeServiceImpl extends BaseService implements NoticeService {	/**	 * * 查询并分页	 * * @param params map对象	 * * @param pageNo 页码.	 * 	 * @param params the params	 * @param pageNo the page no	 * 	 * @return the i list page	 */	@SuppressWarnings("unchecked")	public IListPage pageQuery(Map params, int pageNo) {		return this.pageQuery("Notice.pageQuery", "Notice.pageCount",params, pageNo);	}	/**	 * * 加载	 * * @param param 主键字段值.	 * 	 * @param param the param	 * 	 * @return the map< string, string>	 */	@SuppressWarnings("unchecked")	public Map<String,String> load(String param) {		return (Map<String,String>) load("Notice.loadById", param);	}		/**	 * * 插入数据	 * * @param params map对象.	 * 	 * @param params the params	 * 	 * @return true, if tx insert	 */	public boolean txInsert(Map<String,String> params) {		insert("Notice.insert", params);		return true;	}	/**	 * * 更新数据	 * * @param params map对象.	 * 	 * @param params the params	 * 	 * @return true, if tx update by id	 */	public boolean txUpdateById(Map<String,String> params) {		return update("Notice.updateById", params);	}	/**	 * * 删除数据	 * * @param params map对象.	 * 	 * @param NOTICEID the nOTICEID	 * 	 * @return true, if tx delete	 */	public boolean txDelete(String NOTICEID,UserBean userBean) {		Map<String,String> param = new HashMap<String,String>();		param.put("UPDATER", userBean.getXTYHID());		param.put("UPDNAME", userBean.getXM());		param.put("DELFLAG",BusinessConsts.DEL_FLAG_DROP);		param.put("NOTICE_ID",NOTICEID);		param.put("UPDTIME",BusinessConsts.UPDATE_TIME);		return update("Notice.delete", param);	}	/**	 * * 编辑：新增/删除	 * * Description :	 * * @param NOTICEID	 * * @param noticeModel	 * * @param userBean.	 * 	 * @param NOTICEID the nOTICEID	 * @param noticeModel the notice model	 * @param userBean the user bean	 */	public void txEdit(String NOTICEID, NoticeModel noticeModel, UserBean userBean) {		Map<String,String> params = new HashMap<String,String>();				params.put("NOTICE_TITLE", noticeModel.getNOTICE_TITLE());		params.put("NOTICE_TYPE", noticeModel.getNOTICE_TYPE());		params.put("NOTICE", noticeModel.getNOTICE());		params.put("STATIME", noticeModel.getSTATIME());		params.put("ENDTIME", noticeModel.getENDTIME());		params.put("ISSUER_ID", noticeModel.getISSUER_ID());		params.put("ISSUER_NAME", noticeModel.getISSUER_NAME());		params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);		params.put("NOTICE_OBJ", noticeModel.getNOTICE_OBJ());//公告对象		if(StringUtils.isEmpty(NOTICEID)){			NOTICEID = StringUtil.uuid32len();			params.put("NOTICE_ID", NOTICEID);			params.put("ZTXXID", userBean.getLoginZTXXID());			params.put("STATE", BusinessConsts.UNCOMMIT); 			params.put("CREATER", userBean.getXTYHID());//ID			params.put("CRENAME", userBean.getXM());						txInsert(params);		} else{			params.put("NOTICE_ID", NOTICEID);			params.put("UPDATER", userBean.getXTYHID());			params.put("UPDNAME", userBean.getXM());			params.put("UPDTIME", "sysdate");			txUpdateById(params);			clearCaches(NOTICEID);		}				   //插入附件表		String ATT_PATH = noticeModel.getATT_PATH();//附件		Map<String,String> paramMap = new HashMap<String,String>();		paramMap.put("FROM_BILL_ID", NOTICEID);		List<Map<String,String>> fileList = this.findList("Techorder.queryUploadFile", paramMap);		if(null != fileList && !fileList.isEmpty()){			updateFileUpload(NOTICEID, ATT_PATH, userBean);		}else{			insertFileUpload(NOTICEID, ATT_PATH, userBean);		}			}		/**     * 插入附件表      * @param FROM_BILL_ID 表ID     * @param ATT_PATH 附件路径     * @param userBean     */    public void insertFileUpload(String FROM_BILL_ID,String ATT_PATH,UserBean userBean){    	Map<String, String> paramMap = new HashMap<String, String>();    	paramMap.put("ATT_ID", StringUtil.uuid32len());    	paramMap.put("FROM_BILL_ID", FROM_BILL_ID);    	paramMap.put("ATT_PATH", ATT_PATH);    	paramMap.put("DEL_FLAG", BusinessConsts.DEL_FLAG_COMMON);    	paramMap.put("CREATOR", userBean.getXTYHID());//制单人ID    	paramMap.put("CRE_NAME", userBean.getXM());//制单人名称    	paramMap.put("CRE_TIME", DateUtil.now());//制单时间    	this.insert("Techorder.insertFileUpload", paramMap);    }        /**     * 更新附件信息     * @param ATT_ID 附件ID     * @param ATT_PATH 附件路径     * @param userbean     */    public void updateFileUpload(String FROM_BILL_ID,String ATT_PATH,UserBean userBean){    	Map<String, String> paramMap = new HashMap<String, String>();    	paramMap.put("FROM_BILL_ID", FROM_BILL_ID);    	paramMap.put("ATT_PATH", ATT_PATH);    	this.insert("Techorder.updateFileUpload", paramMap);    }    			      /**     * 根据主表id查询字表明细     *      * @param pId  主表ID     *      * @return       */        public List<NotcAreaModel> childQuery(String pId){    	 Map<String,String> params = new HashMap<String,String>();         params.put("NOTICE_ID", pId);         //只查询0的记录。1为删除。0为正常 		params.put("DEL_FLAG",BusinessConsts.DEL_FLAG_COMMON);        return this.findList("Notice.loadChldByMainId", params);    	    }        /**     * 根据主表id查询字表明细     *      * @param pId  主表ID     *      * @return       */        public List<NotcDeptModel> childDeptQuery(String pId){    	 Map<String,String> params = new HashMap<String,String>();         params.put("NOTICE_ID", pId);         //只查询0的记录。1为删除。0为正常 		params.put("DEL_FLAG",BusinessConsts.DEL_FLAG_COMMON);        return this.findList("Notice.loadDeptChldByMainId", params);    	    }        /**     * 根据主表id查询字表是否有记录     * @param pId  主表ID     * @return  0 无记录      */        public int childQueryForInt(String pId){    	Map<String,String> params = new HashMap<String,String>();    	params.put("NOTICE_ID", pId);    	return this.queryForInt("Notice.loadCount", params);    }        public int childDeptQueryForInt(String pId){    	Map<String,String> params = new HashMap<String,String>();    	params.put("NOTICE_ID", pId);    	return this.queryForInt("Notice.loadDeptCount", params);    }    /**     * * 根据子表Id批量加载子表信息     * @param params 子表IDS     *      * @return the list     */    public List <NotcAreaModel> loadChilds(Map <String, String> params){    	 return findList("Notice.loadChldByIds",params);    }        /**     * * 根据子表Id批量加载子表信息     * @param params 子表IDS     *      * @return the list     */    public List <NotcDeptModel> loadDeptChilds(Map <String, String> params){    	return findList("Notice.loadDeptChldByIds",params);    }    		 /**    * * 子表记录编辑：新增/修改    * @param groupId 主表ID    * @param modelList the 子表 list    *     * @return true, if tx child edit    */   public boolean txChildEdit(String pId, List <NotcAreaModel> modelList){	   	   //新增列表       List <Map <String, String>> addList = new ArrayList <Map <String, String>>();       //修改列表       List <Map <String, String>> updateList = new ArrayList <Map <String, String>>();              for(NotcAreaModel model : modelList){    	   Map<String,String> params = new HashMap<String,String>();    	   params.put("NOTICE_ID", pId);    	   params.put("AREA_ID", model.getAREA_ID());    	   params.put("AREA_NO", model.getAREA_NO());    	   params.put("AREA_NAME", model.getAREA_NAME());    	   params.put("DEL_FLAG", BusinessConsts.DEL_FLAG_COMMON);    	       	   if(StringUtil.isEmpty(model.getNOTC_AREA_ID())){    		   params.put("NOTC_AREA_ID", StringUtil.uuid32len());    		   addList.add(params);    	   }else{    		   params.put("NOTC_AREA_ID", model.getNOTC_AREA_ID());    		   updateList.add(params);     	   }       }	         if (!addList.isEmpty()) {           this.batch4Update("Notice.insertChld", addList);       }	   	   if (!updateList.isEmpty()) {           this.batch4Update("Notice.updateChldById", updateList);       }	   	   //公告生效区域扁平表	   updateAreaFlat(pId);	   	   return true;   }      /**    * * 子表记录编辑：新增/修改    * @param groupId 主表ID    * @param modelList the 子表 list    *     * @return true, if tx child edit    */   public boolean txChildDeptEdit(String pId, List <NotcDeptModel> modelList){	   	   //新增列表       List <Map <String, String>> addList = new ArrayList <Map <String, String>>();       //修改列表       List <Map <String, String>> updateList = new ArrayList <Map <String, String>>();              for(NotcDeptModel model : modelList){    	   Map<String,String> params = new HashMap<String,String>();    	   params.put("NOTICE_ID", pId);    	   params.put("DEPT_ID", model.getDEPT_ID());    	   params.put("DEPT_NAME", model.getDEPT_NAME());    	   params.put("DEL_FLAG", BusinessConsts.DEL_FLAG_COMMON);    	       	   if(StringUtil.isEmpty(model.getNOTC_DEPT_ID())){    		   params.put("NOTC_DEPT_ID", StringUtil.uuid32len());    		   addList.add(params);    	   }else{    		   params.put("NOTC_AREA_ID", model.getNOTC_DEPT_ID());    		   updateList.add(params);     	   }       }	         if (!addList.isEmpty()) {           this.batch4Update("Notice.insertDeptChld", addList);       }	   	   if (!updateList.isEmpty()) {           this.batch4Update("Notice.updateDeptChldById", updateList);       }	   	   	   return true;   }         /**    * 公告生效区域扁平表(T_SYS_NOTC_AREA_FLAT)    * 先将同一个公告ID下的 全部删除】    * 然后 将同一个公告ID下的 全部插入到 扁平表    * @param YHBHS    */   private void updateAreaFlat(String NOTICE_ID){	   Map<String,String> params = new HashMap<String,String>();	   params.put("NOTICE_ID", NOTICE_ID);	   params.put("DEL_FLAG", BusinessConsts.DEL_FLAG_COMMON);       this.delete("Notice.deleteareaflat", NOTICE_ID);       this.update("Notice.insertareaflat", params);   }         /**    * * 子表 的批量删除    * @param IDs the IDs    */   public void txBatch4DeleteChild(String pID,String IDs){	   Map<String,String> params = new HashMap<String,String>();	   params.put("IDS", IDs);	   params.put("DEL_FLAG", BusinessConsts.DEL_FLAG_DROP);	   update("Notice.deleteChldByIds", params);	  	   //删除明细的时候  同步删除 扁平表	   updateAreaFlat(pID);   }            /**    * * 子表 的批量删除    * @param IDs the IDs    */   public void txBatch4DeleteDeptChild(String pID,String IDs){	   Map<String,String> params = new HashMap<String,String>();	   params.put("IDS", IDs);	   params.put("DEL_FLAG", BusinessConsts.DEL_FLAG_DROP);	   update("Notice.deleteDeptChild", params);	    }      /**    * 查询    * @param paramMap    * @return    */   public List findList(Object paramMap){	   return this.findList("Notice.findRepeat", paramMap);   }      public List findDeptList(Object paramMap){	   return this.findList("Notice.findDeptRepeat", paramMap);   }      /**    * 关闭    * @param NOTICEID    */   public void txClose(String NOTICEID,UserBean userBean){	   Map<String,String> map=new HashMap<String, String>();	   map.put("NOTICE_ID", NOTICEID);	   map.put("STATE", BusinessConsts.COMMON_COLSE);	   map.put("UPDATER", userBean.getRYXXID());	   map.put("UPDNAME", userBean.getXM());	   this.update("Notice.close", map);   }   }
